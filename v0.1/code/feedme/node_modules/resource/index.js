var FeedParser = require('feedparser')
var request = require('request');
var url = require('url');



function feed(array, filter, cb){
  


  if(array === undefined){
    cb(undefined);
  }
  else{
  var returnArray = [];

  for(var i =0; i<array.length; i++){

    var entry = array[i];


    

    feedParse(entry, function (entryArray){

            
      
      returnArray.push(entryArray);
      
      if(returnArray.length === array.length){
          
          buildFeed(mergeSort(returnArray), function(finalEntryArray){
            
            cb(finalEntryArray, filter);
          });
      }
    });
  }
}
}

function filtersFeed(filters, cb){



  var finalFilters =[];
  var tempFilter;
  for(var i =0; i < filters.length; i++){
    tempFilter = filters[i];

    if((filters[i] === undefined) || (filters[i].arrayOfSources === undefined) || (filters[i].arrayOfSources.length <= 0)) continue;

    feed(tempFilter.arrayOfSources, tempFilter, function (array, filter){

      filter.arrayOfArticles = array;

      finalFilters.push(filter); 

      
      if(finalFilters.length === filters.length){
        
        cb(finalFilters);
      }
    });
  }
}


function buildFeed(array, cb){
  var finalArray = [];

  computeArrayLength(array, function (totalLength){


    var previousR = -1;
    var count = totalLength;

    while (array.length > 0){
      var r = Math.floor(Math.random() * array.length);
      

      if (r != previousR){

       
          var entry = array[r][0];
          finalArray.push(entry);

          array[r].splice(0,1);

          if(array[r].length === 0){
            array.splice(r, 1);
          }
          previousR = r;
          count--;
      }

      if(array.length === 1){
        var len = array[0].length;
        for(var i = 0; i < len; i++){
          finalArray.push(array[0][0]);
          array[0].splice(0,1);
          count--;
        }
        array.splice(0,1);
      }

    }
    if (finalArray.length === totalLength){
      cb(finalArray);
    }
  });
} 

function feedParse(feedUrl, cb){

            
	var itemArray = [];

	var req = request(feedUrl);

  var feedparser = new FeedParser([true, false, true, true]);


  req.on('error', function (error) {
   if(error){
     	console.log(error);
    }
    });
  req.on('response', function (res) {
    var stream = this;

    if (res.statusCode != 200) return this.emit('error', new Error('Bad status code'));

    stream.pipe(feedparser);
    });


  feedparser.on('error', function(error) {
  // always handle errors
  });
  feedparser.on('readable', function() {
  // This is where the action is!
    var stream = this
    var meta = this.meta // **NOTE** the "meta" is always available in the context of the feedparser instance
    var item;
    var holder;

  while (item = stream.read() ) {
      parseTitle(item, function(entry){
        parseReddit(entry, function(finalArticle){
          itemArray.push(finalArticle);
        });
      });
    }
  });

  feedparser.on('end', function (){
  cb(itemArray);	
  });
}


function parseTitle(item, cb){
  var titleArray = item.title.split(' ');
  if(titleArray.length > 9){
    var i = 9;
    do{
      titleArray[i] = titleArray[i] +'<br>';
      i+=10;
    }
    while(i < titleArray.length);
    var emptyString = '';
    for(var i = 0; i<titleArray.length; i++){
      emptyString = emptyString + ' ' + titleArray[i];
      if(i === titleArray.length - 1){
        item.title = emptyString;
        cb(item);
      }
    }
  }
  else{
  cb(item);
}
}

function computeArrayLength (array, cb){
  var length = 0;
  for(var i =0; i<array.length; i++){
    length = length + array[i].length;
    if(i === array.length - 1){
      cb(length);
    }
  }
}

function parseReddit(article, cb){
  if(article.link.indexOf('reddit.com') > 0){
    var match = /<a +href="([^"]+)">\[link\]/;
    var result = match.exec(article.description)[1];
    article.link = result;
    cb(article);
  }
  else{
    cb(article);
  }
}


function mergeSort(arr)
{
    if (arr.length < 2)
        return arr;
 
    var middle = parseInt(arr.length / 2);
    var left   = arr.slice(0, middle);
    var right  = arr.slice(middle, arr.length);
 
    return merge(mergeSort(left), mergeSort(right));
}
 
function merge(left, right)
{
    var result = [];
 
    while (left.length && right.length) {
        if (left[0].length <= right[0].length) {
            result.push(left.shift());
        } else {
            result.push(right.shift());
        }
    }
 
    while (left.length)
        result.push(left.shift());
 
    while (right.length)
        result.push(right.shift());
 
    return result;
}

exports.feed = feed;
exports.filtersFeed = filtersFeed;
